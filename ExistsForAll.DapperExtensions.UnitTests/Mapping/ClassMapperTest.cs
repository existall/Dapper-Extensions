using ExistsForAll.DapperExtensions.Sql;
using Xunit;

namespace ExistsForAll.DapperExtensions.UnitTests.Mapping
{
	public partial class ClassMapperTests
	{
		[Fact]
		public void Key_WhenMapKeys_ShouldBeInKeys()
		{
			var sut = new IntEntityClassMapper();

			sut.Key(x => x.Id);

			var result = sut.GetKeyMapByName(nameof(IntEntity.Id));

			Assert.NotNull(result);
		}

		[Fact]
		public void key_WhenKeyIsAssign_ShouldNotBeIgnoredAndNotReadOnly()
		{
			var sut = new IntEntityClassMapper();

			sut.Key(x => x.Id).GeneratedBy.Assigned();

			var result = sut.GetKeyMapByName(nameof(IntEntity.Id));

			Assert.NotNull(result);
			result.AssertPropertyMap(nameof(IntEntity.Id));
		}

		[Fact]
		public void key_WhenKeyIsAutoGenerated_ShouldBeIgnoredAndReadOnly()
		{
			var sut = new IntEntityClassMapper();

			sut.Key(x => x.Id).GeneratedBy.AutoGenerated();

			var result = sut.GetKeyMapByName(nameof(IntEntity.Id));

			Assert.NotNull(result);
			result.AssertPropertyMap(nameof(IntEntity.Id), true, true);
		}

		[Fact]
		public void key_WhenKColumnNameIsChanged_ShouldHaveNewColumnName()
		{
			const string columnName = "new_name";

			var sut = new IntEntityClassMapper();

			sut.Key(x => x.Id).Column(columnName);

			var result = sut.GetKeyMapByName(nameof(IntEntity.Id));

			Assert.NotNull(result);
			result.AssertPropertyMap(columnName, true, true);
		}

		[Fact]
		public void EntityType_WhenCreatingNewMapper_ShouldEntityTypeMatch()
		{
			var sut = new IntEntityClassMapper();

			Assert.Equal(sut.EntityType, typeof(IntEntity));
		}

		[Fact]
		public void EntityType_WhenTableAndSchemaAreSet_ShouldMatchWithProperiesValues()
		{
			const string schemaName = "schema_name";
			const string tableName = "table_name";

			var sut = new IntEntityClassMapper();

			sut.Schema(schemaName);
			sut.Table(tableName);

			Assert.Equal(sut.TableName, tableName);
			Assert.Equal(sut.SchemaName, schemaName);
		}
	}
}