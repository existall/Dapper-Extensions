using System;
using System.Collections.Generic;
using System.Diagnostics;
using ExistsForAll.DapperExtensions.Mapper;
using ExistsForAll.DapperExtensions.Postgresql;
using ExistsForAll.DapperExtensions.Predicates;
using ExistsForAll.DapperExtensions.Sql;
using ExistsForAll.DapperExtensions.UnitTests.Mapping;
using ExistsForAll.DapperExtensions.UnitTests.Sql;
using NSubstitute;
using Xunit;

namespace ExistsForAll.DapperExtensions.UnitTests.Postgresql
{
	
	
	public class PostgresqlSqlGeneratorTests
	{
		private const string BaseSql = "SELECT Id, String, DateTime, Guid FROM table";
		
		[Fact]
		public void Select_WhenHaveNoPredicate_ShouldReturnSelectStatement()
		{
			var sut = BuildSut();

			var mapper = GetClassMapper();

			var dictionary = new Dictionary<string, object>();

			var result = sut.Upsert(mapper);
		}

		[Fact]
		public void Select1_WhenHaveNoPredicate_ShouldReturnSelectStatement()
		{
			var sut = BuildSut();

			var mapper = GetAutoGeneratedClassMapper();

			var dictionary = new Dictionary<string, object>();

			var result = sut.Upsert(mapper);
		}
		
		[Fact]
		public void Update1_WhenClassMapHasAssignedId_ShouldGetUpdateStatement()
		{
			var sut = BuildSut();

			var mapper = GetClassMapper();

			var predicate = Predicates.Predicates.Field<IntEntity>(x => x.Id, Operator.Eq, 100);

			var @params = GetParams();

			var timeSpan = Run(() =>
			{
				var result = sut.Select(mapper, null, null, @params, null);
			});

			var timeSpan1 = Run(() =>
			{
				var result = sut.Select(mapper, null, null, @params, null);
			});

			var timeSpan12 = Run(() =>
			{
				for (int i = 0; i < 10000; i++)
				{
					var result = sut.Select(mapper, null, null, @params, null);
				}
			});
		}

		private TimeSpan Run(Action action)
		{

			var sw = Stopwatch.StartNew();

			action();

			sw.Stop();

			return sw.Elapsed;
		}

		private PostgresqlGenerator BuildSut()
		{
			var dapperExtensionsConfiguration = Substitute.For<IDapperExtensionsConfiguration>();
			dapperExtensionsConfiguration.Dialect.Returns(new PostgreSqlDialect());
			return new PostgresqlGenerator(dapperExtensionsConfiguration);
		}

		private IClassMapper GetClassMapper()
		{
			var mapper = new IntEntityMapper();
			mapper.Table("table");
			return mapper;
		}

		private IClassMapper GetAutoGeneratedClassMapper()
		{
			var mapper = new AutoGeneratedLongEntityMapper();
			mapper.Table("table");
			return mapper;
		}

		private Dictionary<string, object> GetParams()
		{
			return new Dictionary<string, object>();
		}
	}
}
