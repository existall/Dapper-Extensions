using System;
using System.Collections.Generic;
using System.Diagnostics;
using ExistsForAll.DapperExtensions.Mapper;
using ExistsForAll.DapperExtensions.Predicates;
using ExistsForAll.DapperExtensions.Sql;
using ExistsForAll.DapperExtensions.UnitTests.Mapping;
using NSubstitute;
using Xunit;

namespace ExistsForAll.DapperExtensions.UnitTests.Postgresql
{
	
	
	public class PostgresqlSqlGeneratorTests
	{	
		[Fact]
		public void Upsert_WhenUpsertNotAutoGenerateMapper_ShouldGetCorrectSql()
		{
			var sut = new PostgreSqlDialect();

			var mapper = GetClassMapper();

			var result = sut.GetUpsertSql(mapper);

			var expected = "INSERT INTO \"table\" (\"id\", \"string\", \"datetime\", \"guid\") VALUES (@Id, @String, @DateTime, @Guid) ON CONFLICT (\"id\") DO UPDATE SET \"id\" = @Id, \"string\" = @String, \"datetime\" = @DateTime, \"guid\" = @Guid;";

			Assert.Equal(expected, result);
		}

		private void Update1_WhenClassMapHasAssignedId_ShouldGetUpdateStatement()
		{
			var sut = BuildSut();

			var mapper = GetClassMapper();

			var predicate = Predicates.Predicates.Field<IntEntity>(x => x.Id, Operator.Eq, 100);

			var @params = GetParams();

			var timeSpan = Run(() =>
			{
				var result = sut.Select(mapper, null, null, @params, null);
			});

			var timeSpan1 = Run(() =>
			{
				var result = sut.Select(mapper, null, null, @params, null);
			});

			var timeSpan12 = Run(() =>
			{
				for (var i = 0; i < 10000; i++)
				{
					var result = sut.Select(mapper, null, null, @params, null);
				}
			});
		}

		private TimeSpan Run(Action action)
		{

			var sw = Stopwatch.StartNew();

			action();

			sw.Stop();

			return sw.Elapsed;
		}

		private SqlGenerator BuildSut()
		{
			var dapperExtensionsConfiguration = Substitute.For<IDapperExtensionsConfiguration>();
			dapperExtensionsConfiguration.Dialect.Returns(new PostgreSqlDialect());
			return new SqlGenerator(dapperExtensionsConfiguration);
		}

		private IClassMapper GetClassMapper()
		{
			var mapper = new IntEntityMapper();
			mapper.Table("table");
			return mapper;
		}

		private IClassMapper GetAutoGeneratedClassMapper()
		{
			var mapper = new AutoGeneratedLongEntityMapper();
			mapper.Table("table");
			return mapper;
		}

		private Dictionary<string, object> GetParams()
		{
			return new Dictionary<string, object>();
		}
	}
}
