using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using Dapper;
using ExistsForAll.DapperExtensions.Mapper;
using ExistsForAll.DapperExtensions.Predicates;
using ExistsForAll.DapperExtensions.Sql;

namespace ExistsForAll.DapperExtensions
{
	public class DapperAsyncImplementor : IDapperAsyncImplementor
	{
		private ISqlGenerator SqlGenerator { get; }
		private IClassMapperRepository ClassMappers { get; }
		private IDapperExtensionsConfiguration Configuration { get; }

		private readonly IGetGenerator _getGenerator;
		private readonly IInsertGenerator _insertGenerator;
		private readonly IUpdateActionsProvider _updateActionsProvider;
		private readonly IDeleteActionsProvider _deleteActionsProvider;
		private readonly ICountActionsProvider _countActionsProvider;
		private readonly IAtomicIncrementActionProvider _atomicIncrement;

		public DapperAsyncImplementor(ISqlGenerator sqlGenerator,
			IClassMapperRepository classMappers,
			IDapperExtensionsConfiguration dapperExtensionsConfiguration)
			: this(sqlGenerator,
				classMappers,
				dapperExtensionsConfiguration,
				new GetActionProvider(dapperExtensionsConfiguration, classMappers, sqlGenerator),
				new InsertActionProvider(dapperExtensionsConfiguration, classMappers, sqlGenerator),
				new UpdateActionsProvider(dapperExtensionsConfiguration, classMappers, sqlGenerator),
				new DeleteActionsProvider(dapperExtensionsConfiguration, classMappers, sqlGenerator),
				new CountActionsProvider(dapperExtensionsConfiguration, classMappers, sqlGenerator),
				new AtomicIncrementActionProvider(dapperExtensionsConfiguration, classMappers, sqlGenerator))
		{ }

		internal DapperAsyncImplementor(ISqlGenerator sqlGenerator,
			IClassMapperRepository classMappers,
			IDapperExtensionsConfiguration dapperExtensionsConfiguration,
			IGetGenerator getGenerator,
			IInsertGenerator insertGenerator,
			IUpdateActionsProvider updateActionsProvider,
			IDeleteActionsProvider deleteActionsProvider,
			ICountActionsProvider countActionsProvider,
			IAtomicIncrementActionProvider atomicIncrement)
		{
			_getGenerator = getGenerator;
			_insertGenerator = insertGenerator;
			_updateActionsProvider = updateActionsProvider;
			_deleteActionsProvider = deleteActionsProvider;
			_countActionsProvider = countActionsProvider;
			_atomicIncrement = atomicIncrement;
			ClassMappers = classMappers;
			Configuration = dapperExtensionsConfiguration;
			SqlGenerator = sqlGenerator;
		}
		#region Implementation of IDapperAsyncImplementor
		/// <summary>
		/// The asynchronous counterpart to <see cref="IDapperImplementor.Insert{T}(IDbConnection, IEnumerable{T}, IDbTransaction, int?)"/>.
		/// </summary>
		public async Task InsertAsync<T>(IDbConnection connection, IEnumerable<T> entities, IDbTransaction transaction = null, int? commandTimeout = default(int?)) where T : class
		{
			var classMap = ClassMappers.GetMap<T>();

			var actionParams = _insertGenerator.InsertBatch(classMap, entities);

			await connection.ExecuteAsync(actionParams.Sql, actionParams.DynamicParameterses, transaction, commandTimeout, CommandType.Text);
		}
		/// <summary>
		/// The asynchronous counterpart to <see cref="IDapperImplementor.Insert{T}(IDbConnection, T, IDbTransaction, int?)"/>.
		/// </summary>
		public async Task InsertAsync<T>(IDbConnection connection, T entity, IDbTransaction transaction, int? commandTimeout) where T : class
		{
			var classMap = ClassMappers.GetMap<T>();
			var autoGeneratedProperty = classMap.GetAutoGeneratedId();

			var actionParams = _insertGenerator.Insert(classMap, entity);

			if (autoGeneratedProperty != null)
			{
				IEnumerable<long> result;
				if (SqlGenerator.SupportsMultipleStatements())
				{
					result = await connection.QueryAsync<long>(actionParams.Sql, actionParams.DynamicParameterses, transaction, commandTimeout, CommandType.Text);
				}
				else
				{
					await connection.ExecuteAsync(actionParams.Sql, actionParams.DynamicParameterses, transaction, commandTimeout, CommandType.Text);
					var sql = SqlGenerator.IdentitySql(classMap);
					result = await connection.QueryAsync<long>(sql, actionParams.DynamicParameterses, transaction, commandTimeout, CommandType.Text);
				}

				var hasResult = false;
				object identityInt = null;
				foreach (var identityValue in result)
				{
					if (hasResult)
					{
						continue;
					}

					identityInt = identityValue;
					hasResult = true;
				}
				if (!hasResult)
				{
					throw new InvalidOperationException("The source sequence is empty.");
				}

				autoGeneratedProperty.Setter(entity, Convert.ChangeType(identityInt, autoGeneratedProperty.PropertyInfo.PropertyType));
				return;
			}

			await connection.ExecuteAsync(actionParams.Sql, actionParams.DynamicParameterses, transaction, commandTimeout, CommandType.Text);
		}
		/// <summary>
		/// The asynchronous counterpart to <see cref="IDapperImplementor.Update{T}(IDbConnection, T, IDbTransaction, int?)"/>.
		/// </summary>
		public async Task<bool> UpdateAsync<T>(IDbConnection connection, T entity, IDbTransaction transaction, int? commandTimeout, bool ignoreAllKeyProperties) where T : class
		{
			var classMap = ClassMappers.GetMap<T>();
			var actionParams = _updateActionsProvider.Update(classMap, entity);

			return await connection.ExecuteAsync(actionParams.Sql, actionParams.DynamicParameterses, transaction, commandTimeout, CommandType.Text) > 0;
		}

		public async Task<bool> UpdateAsync<T>(IDbConnection connection,
			IPredicate predicate,
			IList<IProjectionSet> projectionSets,
			IDbTransaction transaction,
			int? commandTimeout) where T : class
		{
			var classMap = ClassMappers.GetMap<T>();

			var actionParams = _updateActionsProvider.Update(classMap, predicate, projectionSets);

			return await connection.ExecuteAsync(actionParams.Sql, actionParams.DynamicParameterses, transaction, commandTimeout, CommandType.Text) > 0;
		}

		/// <summary>
		/// The asynchronous counterpart to <see cref="IDapperImplementor.Delete{T}(IDbConnection, T, IDbTransaction, int?)"/>.
		/// </summary>
		public async Task<bool> DeleteAsync<T>(IDbConnection connection, T entity, IDbTransaction transaction, int? commandTimeout) where T : class
		{
			var classMap = ClassMappers.GetMap<T>();
			var predicate = classMap.GetKeyPredicate(entity);
			return await DeleteAsync<T>(connection, classMap, predicate, transaction, commandTimeout);
		}
		/// <summary>
		/// The asynchronous counterpart to <see cref="IDapperImplementor.Delete{T}(IDbConnection, object, IDbTransaction, int?)"/>.
		/// </summary>
		public async Task<bool> DeleteAsync<T>(IDbConnection connection, object predicate, IDbTransaction transaction, int? commandTimeout) where T : class
		{
			var classMap = ClassMappers.GetMap<T>();
			var wherePredicate = classMap.GetPredicate(predicate);
			return await DeleteAsync<T>(connection, classMap, wherePredicate, transaction, commandTimeout);
		}

		protected async Task<bool> DeleteAsync<T>(IDbConnection connection, IClassMapper classMap, IPredicate predicate, IDbTransaction transaction, int? commandTimeout) where T : class
		{
			var actionParams = _deleteActionsProvider.Delete(classMap, predicate);
			return await connection.ExecuteAsync(actionParams.Sql, actionParams.DynamicParameterses, transaction, commandTimeout, CommandType.Text) > 0;
		}
		/// <summary>
		/// The asynchronous counterpart to <see cref="IDapperImplementor.Get{T}"/>.
		/// </summary>
		public async Task<T> GetAsync<T>(IDbConnection connection,
			object id,
			IDbTransaction transaction = null,
			int? commandTimeout = null) where T : class
		{
			var classMap = ClassMappers.GetMap<T>();
			var predicate = classMap.GetIdPredicate(id);
			var result = (await GetListAsync<T>(connection, classMap, predicate, null, transaction, commandTimeout, null)).SingleOrDefault();
			return result;
		}

		/// <summary>
		/// The asynchronous counterpart to <see cref="IDapperImplementor.GetList{T}"/>.
		/// </summary>
		public async Task<IEnumerable<T>> GetListAsync<T>(IDbConnection connection,
			object predicate = null,
			IList<ISort> sort = null,
			IDbTransaction transaction = null,
			int? commandTimeout = null,
			IList<IProjection> projections = null) where T : class
		{
			var classMap = ClassMappers.GetMap<T>();
			var wherePredicate = classMap.GetPredicate(predicate);
			return await GetListAsync<T>(connection, classMap, wherePredicate, sort, transaction, commandTimeout, projections);
		}

		/// <summary>
		/// The asynchronous counterpart to <see cref="IDapperImplementor.GetPage{T}"/>.
		/// </summary>
		public async Task<IEnumerable<T>> GetPageAsync<T>(
			IDbConnection connection,
			object predicate = null,
			IList<ISort> sort = null,
			int page = 1,
			int resultsPerPage = 10,
			IDbTransaction transaction = null,
			int? commandTimeout = null,
			IList<IProjection> projections = null) where T : class
		{
			var classMap = ClassMappers.GetMap<T>();
			var wherePredicate = classMap.GetPredicate(predicate);
			return await GetPageAsync<T>(connection, classMap, wherePredicate, sort, page, resultsPerPage, transaction, commandTimeout, projections);
		}

		/// <summary>
		/// The asynchronous counterpart to <see cref="IDapperImplementor.GetSet{T}"/>.
		/// </summary>
		public async Task<IEnumerable<T>> GetSetAsync<T>(IDbConnection connection,
			object predicate = null,
			IList<ISort> sort = null,
			int firstResult = 1,
			int maxResults = 10,
			IDbTransaction transaction = null,
			int? commandTimeout = null,
			IList<IProjection> projections = null) where T : class
		{
			var classMap = ClassMappers.GetMap<T>();
			var wherePredicate = classMap.GetPredicate(predicate);
			return await GetSetAsync<T>(connection, classMap, wherePredicate, sort, firstResult, maxResults, transaction, commandTimeout, projections);
		}

		/// <summary>
		/// The asynchronous counterpart to <see cref="IDapperImplementor.Count{T}"/>.
		/// </summary>
		public async Task<int> CountAsync<T>(IDbConnection connection, object predicate = null, IDbTransaction transaction = null,
			int? commandTimeout = null) where T : class
		{
			var classMap = ClassMappers.GetMap<T>();

			var actionParams = _countActionsProvider.Count(classMap, (IPredicate)predicate);

			return (int)(await connection.QueryAsync(actionParams.Sql, actionParams.DynamicParameterses, transaction, commandTimeout, CommandType.Text)).Single().Total;
		}

		public async Task<int> AtomicIncrementAsync<T>(IDbConnection connection,
			object predicate,
			IProjection projection,
			int amount,
			IDbTransaction dbTransaction,
			int? commandTimeout) where T : class
		{
			Guard.ArgumentNull(projection, nameof(projection));
			Guard.ArgumentNull(predicate, nameof(predicate));

			var classMap = ClassMappers.GetMap<T>();

			var actionParams = _atomicIncrement.AtomicIncrement(classMap, (IPredicate)predicate, projection, amount);

			return await connection.ExecuteAsync(actionParams.Sql, actionParams.DynamicParameterses, dbTransaction, commandTimeout, CommandType.Text);
		}

		#endregion

		#region Helpers

		/// <summary>
		/// The asynchronous counterpart to <see cref="IDapperImplementor.GetList{T}"/>.
		/// </summary>
		protected async Task<IEnumerable<T>> GetListAsync<T>(
			IDbConnection connection,
			IClassMapper classMap,
			IPredicate predicate,
			IList<ISort> sort,
			IDbTransaction transaction,
			int? commandTimeout,
			IList<IProjection> projections) where T : class
		{
			var actionParams = _getGenerator.GetList(classMap, predicate, sort, projections);

			return await connection.QueryAsync<T>(actionParams.Sql, actionParams.DynamicParameterses, transaction, commandTimeout, CommandType.Text);
		}

		/// <summary>
		/// The asynchronous counterpart to <see cref="IDapperImplementor.GetPage{T}"/>.
		/// </summary>
		protected async Task<IEnumerable<T>> GetPageAsync<T>(
			IDbConnection connection,
			IClassMapper classMap,
			IPredicate predicate,
			IList<ISort> sort,
			int page,
			int resultsPerPage,
			IDbTransaction transaction,
			int? commandTimeout,
			IList<IProjection> projections) where T : class
		{
			var actionParams = _getGenerator.GetPage(classMap, predicate, sort, projections, page, resultsPerPage);

			return await connection.QueryAsync<T>(actionParams.Sql, actionParams.DynamicParameterses, transaction, commandTimeout, CommandType.Text);
		}

		/// <summary>
		/// The asynchronous counterpart to <see cref="IDapperImplementor.GetSet{T}"/>.
		/// </summary>
		protected async Task<IEnumerable<T>> GetSetAsync<T>(
			IDbConnection connection,
			IClassMapper classMap,
			IPredicate predicate,
			IList<ISort> sort,
			int firstResult,
			int maxResults,
			IDbTransaction transaction,
			int? commandTimeout,
			IList<IProjection> projections) where T : class
		{
			var actionParams = _getGenerator.GetSet(classMap, predicate, sort, firstResult, maxResults, projections);

			return await connection.QueryAsync<T>(actionParams.Sql, actionParams.DynamicParameterses, transaction, commandTimeout, CommandType.Text);
		}

		#endregion
	}
}