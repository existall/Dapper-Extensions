using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using Dapper;
using ExistsForAll.DapperExtensions.Mapper;
using ExistsForAll.DapperExtensions.Predicates;
using ExistsForAll.DapperExtensions.Sql;

namespace ExistsForAll.DapperExtensions
{
	public class DapperImplementor : IDapperImplementor
	{
		protected IClassMapperRepository ClassMappers { get; }
		protected IDapperExtensionsConfiguration Configuration { get; }
		protected ISqlGenerator SqlGenerator { get; }

		public DapperImplementor(ISqlGenerator sqlGenerator,
			IClassMapperRepository classMappers,
			IDapperExtensionsConfiguration dapperExtensionsConfiguration)
		{
			ClassMappers = classMappers;
			Configuration = dapperExtensionsConfiguration;
			SqlGenerator = sqlGenerator;
		}

		public T Get<T>(IDbConnection connection, object id, IDbTransaction transaction, int? commandTimeout) where T : class
		{
			var classMap = ClassMappers.GetMap<T>();
			var predicate = classMap.GetIdPredicate(id);
			var result = GetList<T>(connection, classMap, predicate, null, transaction, commandTimeout, true, null).SingleOrDefault();
			return result;
		}

		public void Insert<T>(IDbConnection connection,
			IEnumerable<T> entities,
			IDbTransaction transaction,
			int? commandTimeout) where T : class
		{
			var classMap = ClassMappers.GetMap<T>();

			var parameters = new List<DynamicParameters>();

			var columns = classMap.GetMutableColumns();

			var autoGeneratedProperty = classMap.GetAutoGeneratedId();

			var guids = new IPropertyMap[0];

			if (Configuration.AutoPopulateKeyGuidValue)
			{
				guids = columns.Where(x => x.PropertyInfo.PropertyType == typeof(Guid)).ToArray();
			}

			foreach (var e in entities)
			{
				foreach (var guid in guids)
				{
					if ((Guid)guid.Getter(e) == Guid.Empty)
					{
						var value = Configuration.GuidCreator.GetGuid();
						guid.Setter(e, value);
					}
				}

				var dynamicParameters = new DynamicParameters();

				foreach (var column in columns)
				{
					dynamicParameters.Add(column.Name, column.Getter(e));
				}

				if (autoGeneratedProperty != null)
				{
					var defaultValue = autoGeneratedProperty.Getter(e);
					//dynamicParameters.Add("IdOutParam", direction: ParameterDirection.Output, value: defaultValue);
				}

				parameters.Add(dynamicParameters);
			}

			var sql = SqlGenerator.Insert(classMap);

			connection.Execute(sql, parameters, transaction, commandTimeout, CommandType.Text);
		}

		public void Insert<T>(IDbConnection connection, T entity, IDbTransaction transaction, int? commandTimeout)
			where T : class
		{
			var classMap = ClassMappers.GetMap<T>();

			var columns = classMap.GetMutableColumns();

			var autoGeneratedProperty = classMap.GetAutoGeneratedId();

			var guids = new IPropertyMap[0];

			if (Configuration.AutoPopulateKeyGuidValue)
			{
				guids = columns.Where(x => x.PropertyInfo.PropertyType == typeof(Guid)).ToArray();

				foreach (var guid in guids)
				{
					if ((Guid)guid.Getter(entity) != Guid.Empty)
						continue;

					var value = Configuration.GuidCreator.GetGuid();
					guid.Setter(entity, value);
				}
			}

			var sql = SqlGenerator.Insert(classMap);

			var dynamicParameters = new DynamicParameters();

			foreach (var column in columns)
			{
				dynamicParameters.Add(column.Name, column.Getter(entity));
			}

			if (autoGeneratedProperty != null)
			{
				IEnumerable<long> result;
				if (SqlGenerator.SupportsMultipleStatements())
				{
					sql += Configuration.Dialect.BatchSeparator + SqlGenerator.IdentitySql(classMap);
					result = connection.Query<long>(sql, dynamicParameters, transaction, false, commandTimeout, CommandType.Text);
				}
				else
				{
					connection.Execute(sql, entity, transaction, commandTimeout, CommandType.Text);
					sql = SqlGenerator.IdentitySql(classMap);
					result = connection.Query<long>(sql, dynamicParameters, transaction, false, commandTimeout, CommandType.Text);
				}

				var hasResult = false;
				object identityInt = null;
				foreach (var identityValue in result)
				{
					if (hasResult)
					{
						continue;
					}

					identityInt = identityValue;
					hasResult = true;
				}
				if (!hasResult)
				{
					throw new InvalidOperationException("The source sequence is empty.");
				}

				autoGeneratedProperty.Setter(entity, Convert.ChangeType(identityInt, autoGeneratedProperty.PropertyInfo.PropertyType));
				return;
			}

			connection.Execute(sql, dynamicParameters, transaction, commandTimeout, CommandType.Text);
		}

		public bool Update<T>(IDbConnection connection, T entity, IDbTransaction transaction, int? commandTimeout) where T : class
		{
			var classMap = ClassMappers.GetMap<T>();
			var predicate = classMap.GetKeyPredicate(entity);
			var parameters = new Dictionary<string, object>();
			var sql = SqlGenerator.Update(classMap, predicate, parameters);
			var dynamicParameters = new DynamicParameters();

			var columns = classMap.GetMutableColumns();

			foreach (var property in ReflectionHelper.GetObjectValues(entity)
				.Where(property => columns.Any(c => c.Name == property.Key)))
			{
				dynamicParameters.Add(property.Key, property.Value);
			}

			foreach (var parameter in parameters)
			{
				dynamicParameters.Add(parameter.Key, parameter.Value);
			}

			return connection.Execute(sql, dynamicParameters, transaction, commandTimeout, CommandType.Text) > 0;
		}

		public bool Delete<T>(IDbConnection connection, T entity, IDbTransaction transaction, int? commandTimeout)
			where T : class
		{
			IClassMapper classMap = ClassMappers.GetMap<T>();
			var predicate = classMap.GetKeyPredicate(entity);
			return Delete<T>(connection, classMap, predicate, transaction, commandTimeout);
		}

		public bool Delete<T>(IDbConnection connection, object predicate, IDbTransaction transaction, int? commandTimeout)
			where T : class
		{
			IClassMapper classMap = ClassMappers.GetMap<T>();
			var wherePredicate = classMap.GetPredicate(predicate);
			return Delete<T>(connection, classMap, wherePredicate, transaction, commandTimeout);
		}

		public IEnumerable<T> GetList<T>(
			IDbConnection connection,
			object predicate,
			IList<ISort> sort,
			IDbTransaction transaction,
			int? commandTimeout,
			bool buffered,
			IList<IProjection> projections = null) where T : class
		{
			IClassMapper classMap = ClassMappers.GetMap<T>();
			var wherePredicate = classMap.GetPredicate(predicate);
			return GetList<T>(connection, classMap, wherePredicate, sort, transaction, commandTimeout, buffered, projections);
		}

		public IEnumerable<T> GetPage<T>(
			IDbConnection connection,
			object predicate,
			IList<ISort> sort,
			int page,
			int resultsPerPage,
			IDbTransaction transaction,
			int? commandTimeout,
			bool buffered,
			IList<IProjection> projections = null) where T : class
		{
			IClassMapper classMap = ClassMappers.GetMap<T>();
			var wherePredicate = classMap.GetPredicate(predicate);
			return GetPage<T>(connection, classMap, wherePredicate, sort, page, resultsPerPage, transaction, commandTimeout,
				buffered);
		}

		public IEnumerable<T> GetSet<T>(
			IDbConnection connection,
			object predicate,
			IList<ISort> sort,
			int firstResult,
			int maxResults,
			IDbTransaction transaction,
			int? commandTimeout,
			bool buffered,
			IList<IProjection> projections = null) where T : class
		{
			IClassMapper classMap = ClassMappers.GetMap<T>();
			var wherePredicate = classMap.GetPredicate(predicate);
			return GetSet<T>(connection, classMap, wherePredicate, sort, firstResult, maxResults, transaction, commandTimeout,
				buffered);
		}

		public int Count<T>(IDbConnection connection, object predicate, IDbTransaction transaction, int? commandTimeout)
			where T : class
		{
			IClassMapper classMap = ClassMappers.GetMap<T>();
			var wherePredicate = classMap.GetPredicate(predicate);
			var parameters = new Dictionary<string, object>();
			var sql = SqlGenerator.Count(classMap, wherePredicate, parameters);
			var dynamicParameters = new DynamicParameters();
			foreach (var parameter in parameters)
			{
				dynamicParameters.Add(parameter.Key, parameter.Value);
			}

			return (int)connection.Query(sql, dynamicParameters, transaction, false, commandTimeout, CommandType.Text).Single()
				.Total;
		}

		public IMultipleResultReader GetMultiple(IDbConnection connection, GetMultiplePredicate predicate,
			IDbTransaction transaction, int? commandTimeout)
		{
			if (SqlGenerator.SupportsMultipleStatements())
			{
				return GetMultipleByBatch(connection, predicate, transaction, commandTimeout);
			}

			return GetMultipleBySequence(connection, predicate, transaction, commandTimeout);
		}

		public int AtomicIncrement<T>(IDbConnection connection,
			object predicate,
			IProjection projection,
			int amount,
			IDbTransaction dbTransaction,
			int? commandTimeout) where T : class
		{
			Guard.ArgumentNull(projection, nameof(projection));
			Guard.ArgumentNull(predicate, nameof(predicate));

			var classMap = ClassMappers.GetMap<T>();
			var target = classMap.GetPropertyMapByName(projection.PropertyName);

			if (target.Ignored || target.IsReadOnly)
				throw new InvalidOperationException($"Atomic increment is not allowed on {projection.PropertyName} for type {classMap.EntityType}. It's either ignored or read only");

			var wherePredicate = classMap.GetPredicate(predicate);
			var parameters = new Dictionary<string, object>();
			
			var sql = SqlGenerator.AtomicIncrement(classMap, wherePredicate, parameters, projection, amount);

			return connection.Execute(sql, parameters, dbTransaction, commandTimeout, CommandType.Text);
		}

		protected IEnumerable<T> GetList<T>(IDbConnection connection,
			IClassMapper classMap,
			IPredicate predicate,
			IList<ISort> sort,
			IDbTransaction transaction,
			int? commandTimeout,
			bool buffered, IList<IProjection> projections) where T : class
		{
			var parameters = new Dictionary<string, object>();

			var sql = SqlGenerator.Select(classMap, predicate, sort, parameters, projections);

			var dynamicParameters = new DynamicParameters();

			foreach (var parameter in parameters)
			{
				dynamicParameters.Add(parameter.Key, parameter.Value);
			}

			return connection.Query<T>(sql, dynamicParameters, transaction, buffered, commandTimeout, CommandType.Text);
		}

		protected IEnumerable<T> GetPage<T>(IDbConnection connection, IClassMapper classMap, IPredicate predicate,
			IList<ISort> sort, int page, int resultsPerPage, IDbTransaction transaction, int? commandTimeout, bool buffered)
			where T : class
		{
			var parameters = new Dictionary<string, object>();
			var sql = SqlGenerator.SelectPaged(classMap, predicate, sort, page, resultsPerPage, parameters);
			var dynamicParameters = new DynamicParameters();
			foreach (var parameter in parameters)
			{
				dynamicParameters.Add(parameter.Key, parameter.Value);
			}

			return connection.Query<T>(sql, dynamicParameters, transaction, buffered, commandTimeout, CommandType.Text);
		}

		protected IEnumerable<T> GetSet<T>(IDbConnection connection, IClassMapper classMap, IPredicate predicate,
			IList<ISort> sort, int firstResult, int maxResults, IDbTransaction transaction, int? commandTimeout, bool buffered)
			where T : class
		{
			var parameters = new Dictionary<string, object>();
			var sql = SqlGenerator.SelectSet(classMap, predicate, sort, firstResult, maxResults, parameters);
			var dynamicParameters = new DynamicParameters();
			foreach (var parameter in parameters)
			{
				dynamicParameters.Add(parameter.Key, parameter.Value);
			}

			return connection.Query<T>(sql, dynamicParameters, transaction, buffered, commandTimeout, CommandType.Text);
		}

		protected bool Delete<T>(IDbConnection connection, IClassMapper classMap, IPredicate predicate,
			IDbTransaction transaction, int? commandTimeout) where T : class
		{
			var parameters = new Dictionary<string, object>();
			var sql = SqlGenerator.Delete(classMap, predicate, parameters);
			var dynamicParameters = new DynamicParameters();
			foreach (var parameter in parameters)
			{
				dynamicParameters.Add(parameter.Key, parameter.Value);
			}

			return connection.Execute(sql, dynamicParameters, transaction, commandTimeout, CommandType.Text) > 0;
		}

		protected GridReaderResultReader GetMultipleByBatch(IDbConnection connection, GetMultiplePredicate predicate,
			IDbTransaction transaction, int? commandTimeout)
		{
			var parameters = new Dictionary<string, object>();
			var sql = new StringBuilder();
			foreach (var item in predicate.Items)
			{
				IClassMapper classMap = ClassMappers.GetMap(item.Type);
				var itemPredicate = item.Value as IPredicate;
				if (itemPredicate == null && item.Value != null)
				{
					itemPredicate = classMap.GetPredicate(item.Value);
				}

				sql.AppendLine(SqlGenerator.Select(classMap, itemPredicate, item.Sort, parameters) +
							   Configuration.Dialect.BatchSeparator);
			}

			var dynamicParameters = new DynamicParameters();
			foreach (var parameter in parameters)
			{
				dynamicParameters.Add(parameter.Key, parameter.Value);
			}

			var grid = connection.QueryMultiple(sql.ToString(), dynamicParameters, transaction, commandTimeout,
				CommandType.Text);
			return new GridReaderResultReader(grid);
		}

		protected SequenceReaderResultReader GetMultipleBySequence(IDbConnection connection, GetMultiplePredicate predicate,
			IDbTransaction transaction, int? commandTimeout)
		{
			IList<SqlMapper.GridReader> items = new List<SqlMapper.GridReader>();
			foreach (var item in predicate.Items)
			{
				var parameters = new Dictionary<string, object>();
				IClassMapper classMap = ClassMappers.GetMap(item.Type);
				var itemPredicate = item.Value as IPredicate;
				if (itemPredicate == null && item.Value != null)
				{
					itemPredicate = classMap.GetPredicate(item.Value);
				}

				var sql = SqlGenerator.Select(classMap, itemPredicate, item.Sort, parameters);
				var dynamicParameters = new DynamicParameters();
				foreach (var parameter in parameters)
				{
					dynamicParameters.Add(parameter.Key, parameter.Value);
				}

				var queryResult = connection.QueryMultiple(sql, dynamicParameters, transaction, commandTimeout, CommandType.Text);
				items.Add(queryResult);
			}

			return new SequenceReaderResultReader(items);
		}
	}
}
