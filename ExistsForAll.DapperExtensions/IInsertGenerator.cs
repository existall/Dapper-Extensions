using System;
using System.Linq;
using Dapper;
using ExistsForAll.DapperExtensions.Mapper;
using ExistsForAll.DapperExtensions.Sql;

namespace ExistsForAll.DapperExtensions
{
	internal interface IInsertGenerator
	{
		ActionParams Insert<T>(T entity) where T : class ;
	}

	internal class InsertGenerator : GeneratorBase,  IInsertGenerator
	{
		public InsertGenerator(IDapperExtensionsConfiguration configuration,
			IClassMapperRepository classMapperRepository,
			ISqlGenerator sqlGenerator) 
			: base(configuration, classMapperRepository, sqlGenerator)
		{
		}
		
		public ActionParams Insert<T>(T entity) where T : class 
		{
			var classMap = ClassMappers.GetMap<T>();

			var columns = classMap.GetNotIgnoredColumns();

			var autoGeneratedProperty = classMap.GetAutoGeneratedId();

			var guids = new IPropertyMap[0];

			if (Configuration.AutoPopulateKeyGuidValue)
			{
				guids = columns.Where(x => x.PropertyInfo.PropertyType == typeof(Guid)).ToArray();

				foreach (var guid in guids)
				{
					if ((Guid) guid.Getter(entity) != Guid.Empty)
						continue;

					var value = Configuration.GuidCreator.GetGuid();
					guid.Setter(entity, value);
				}
			}

			var sql = SqlGenerator.Insert(classMap);

			var dynamicParameters = new DynamicParameters();

			foreach (var column in columns)
			{
				dynamicParameters.Add(column.Name, column.Getter(entity));
			}
			
			return ActionParams.New(sql, dynamicParameters);
		}

		
	}
}